{"version":3,"file":"index.js","sources":["../source/input.ts","../source/prompts.ts","../source/enums/MethodType.ts","../source/files.ts","../source/html-summary.ts","../source/routes.ts","../source/overrides.ts","../source/proxy.ts","../source/response/paginated.ts","../source/throttling.ts","../source/ui.ts","../source/graphql.ts","../source/storage.ts","../source/server.ts","../source/response/searchable.ts"],"sourcesContent":["import { InputListener } from './interfaces';\nimport readline from 'readline';\n\nexport class InputManager {\n  private listeners: Array<InputListener>;\n\n  /**\n   * Filter a listener using its name and control key.\n   *\n   * @param listener The input listener\n   */\n  private filterInputListener(\n    key: readline.Key,\n    listener: InputListener\n  ): boolean {\n    return listener.key === key.name && listener.control === key.ctrl;\n  }\n\n  /**\n   * Filter and apply listeners that matches the event's properties.\n   *\n   * @param chunk Chunk\n   * @param key The event key\n   */\n  private onKeyPress(chunk: any, key: readline.Key): void {\n    this.listeners\n      .filter((listener) => this.filterInputListener(key, listener))\n      .forEach(this.executeEvent);\n  }\n\n  private isPromise(obj: any) {\n    return Boolean(obj.then);\n  }\n\n  private executeEvent(listener: InputListener) {\n    this.unbindKeypress();\n    const eventResult = listener.event();\n\n    if (eventResult && this.isPromise(eventResult)) {\n      eventResult.then(() => {\n        this.reopenStdinAfterInquirer();\n      });\n    } else {\n      this.bindKeypress();\n    }\n  }\n\n  private reopenStdinAfterInquirer() {\n    readline.emitKeypressEvents(process.stdin);\n\n    if (typeof process.stdin.setRawMode === 'function') {\n      process.stdin.setRawMode(true);\n    }\n\n    process.stdin.resume();\n    this.bindKeypress();\n  }\n\n  private bindKeypress() {\n    process.stdin.on('keypress', this.onKeyPress);\n  }\n\n  private unbindKeypress() {\n    process.stdin.off('keypress', this.onKeyPress);\n  }\n\n  /**\n   * Creates a new input manager.\n   */\n  constructor() {\n    this.executeEvent = this.executeEvent.bind(this);\n    this.onKeyPress = this.onKeyPress.bind(this);\n\n    this.listeners = [\n      { key: 'q', control: false, event: process.exit },\n      { key: 'c', control: true, event: process.exit },\n    ];\n  }\n\n  /**\n   * Start listening to user inputs.\n   *\n   * @param raw The raw mode state\n   */\n  init(raw = true): void {\n    readline.emitKeypressEvents(process.stdin);\n\n    if (typeof process.stdin.setRawMode === 'function') {\n      process.stdin.setRawMode(raw);\n    }\n\n    this.bindKeypress();\n  }\n\n  /**\n   * Register an event listener to a key.\n   *\n   * @param key The target key\n   * @param event The event callback\n   * @param control The control key state\n   */\n  addListener(\n    key: string,\n    event: () => Promise<void> | void,\n    control: boolean = false\n  ): void {\n    const listener: InputListener = { key, event, control };\n    this.listeners.push(listener);\n  }\n}\n","import inquirer from 'inquirer';\nimport fuzzy from 'fuzzy';\nimport { prop } from 'ramda';\n\ninquirer.registerPrompt(\n  'autocomplete',\n  require('inquirer-autocomplete-prompt')\n);\n\nconst filterByPredicate = (list: string[]) => (predicate: string = '') =>\n  fuzzy.filter(predicate, list).map(prop('original'));\n\n/**\n * Prompts a route path.\n *\n * @param paths The routes paths\n * @return The selected proxy\n */\nexport function promptRoutePath(paths: string[]): Promise<{ url: string }> {\n  const filter = filterByPredicate(paths);\n\n  return inquirer.prompt([\n    {\n      type: 'autocomplete',\n      name: 'url',\n      message: 'Search for the endpoint URL:',\n      source: (_: any, input: string) => Promise.resolve(filter(input)),\n    },\n  ]);\n}\n\n/**\n * Prompts a route method type.\n *\n * @param types The route method types\n * @return The selected type\n */\nexport function promptRouteMethodType(\n  types: string[]\n): Promise<{ type: string }> {\n  const filter = filterByPredicate(types);\n\n  return inquirer.prompt([\n    {\n      type: 'autocomplete',\n      name: 'type',\n      message: 'Select the type:',\n      source: (_: any, input: string) => Promise.resolve(filter(input)),\n    },\n  ]);\n}\n\n/**\n * Prompts a route method override.\n *\n * @param overrides The route method overrides\n * @return The selected override\n */\nexport function promptRouteMethodOverride(\n  overrides: string[]\n): Promise<{ name: string }> {\n  const filter = filterByPredicate(overrides);\n\n  return inquirer.prompt([\n    {\n      type: 'autocomplete',\n      name: 'name',\n      message: 'Select the override settings:',\n      source: (_: any, input: string) => Promise.resolve(filter(input)),\n    },\n  ]);\n}\n\n/**\n * Prompts a proxy.\n *\n * @param proxies The current list of proxies\n * @return The selected proxy\n */\nexport function promptProxy(proxies: string[]): Promise<{ proxy: string }> {\n  const filter = filterByPredicate(proxies);\n\n  return inquirer.prompt([\n    {\n      type: 'autocomplete',\n      name: 'proxy',\n      message: 'Select the proxy:',\n      source: (_: any, input: string) => Promise.resolve(filter(input)),\n    },\n  ]);\n}\n","enum MethodType {\n  GET = 'get',\n  POST = 'post',\n  PUT = 'put',\n  DELETE = 'delete',\n  PATCH = 'patch',\n}\n\nexport default MethodType\n","import { Dirent, readFileSync, readdirSync } from 'fs';\nimport { basename, dirname, extname, join, parse } from 'path';\n\n/**\n * Return a boolean indicating that given dirent is a file or not.\n *\n * @param dirent The dirent object\n * @return A boolean indicating that the dirent name matches the text\n */\nexport function direntIsFile(dirent: Dirent): boolean {\n  return dirent.isFile();\n}\n\n/**\n * Return a boolean indicating that the dirent name includes the text.\n *\n * @param text The text to match\n * @param dirent The dirent object\n * @return A boolean indicating that the dirent name includes the text\n */\nexport function direntFilenameMatchText(text: string, dirent: Dirent): boolean {\n  return parse(dirent.name).name === text;\n}\n\n/**\n * Read the file and parse its content as json.\n *\n * @param path The file path\n * @return The file content\n */\nexport function readJSONFileSync(path: string): any {\n  return JSON.parse(readFileSync(path).toString());\n}\n\n/**\n * Read the fixture file.\n *\n * @param path The fixture path\n * @return The fixture content\n */\nexport function readFixtureFileSync(path: string): any {\n  if (extname(path) === '.json') {\n    return readJSONFileSync(path);\n  }\n\n  return readFileSync(path);\n}\n\n/**\n * Find the file path of a given dirname and basename.\n *\n * @param dir The file dirname\n * @param base The file basename\n * @param scenario An optional custom scenario for a fixture file\n * @return File path if found\n */\nexport function findFilePathByDirnameAndBasename(\n  dir: string,\n  base: string,\n  scenario?: string\n): string {\n  const fullBasename = scenario ? `${base}--${scenario}` : base;\n\n  const [fixture] = readdirSync(dir, { withFileTypes: true })\n    .filter(direntIsFile)\n    .filter((dirent) => direntFilenameMatchText(fullBasename, dirent));\n\n  if (!fixture) {\n    throw new Error('Fixture not found');\n  }\n\n  return join(dir, fixture.name);\n}\n\n/**\n * Scan the fixture path of a given path, searching also as a folder with an index file.\n *\n * @param path The search path\n * @param scenario An optional custom scenario for a fixture file\n * @return The fixture path\n */\nexport function scanFixturePath(path: string, scenario?: string): string {\n  const folder = dirname(path);\n  const file = basename(path);\n\n  const pathDirnameFixtureDirectory = join('data', folder);\n  const pathFixtureDirectory = join('data', path);\n\n  try {\n    const indexFixture = findFilePathByDirnameAndBasename(\n      pathFixtureDirectory,\n      'index',\n      scenario\n    );\n\n    return indexFixture;\n  } catch (error) {\n    const fixture = findFilePathByDirnameAndBasename(\n      pathDirnameFixtureDirectory,\n      file,\n      scenario\n    );\n\n    return fixture;\n  }\n}\n\n/**\n * Read the first file that matches a valid fixture of a given path and scenario.\n *\n * @param path The search path\n * @param scenario An optional custom scenario for a fixture file\n * @return The file content\n */\nexport function readFixturePathSync(path: string, scenario?: string): any {\n  const fixturePath = scanFixturePath(path, scenario);\n\n  return readFixtureFileSync(fixturePath);\n}\n\n/**\n * Read a fixture file using the extension when available, or by scanning the whole directory.\n *\n * @param path The file path\n * @param fallbackPath The fallback file path\n * @param scenario An optional custom scenario for a fixture file\n * @return The file content.\n */\nexport function readFixtureSync(\n  path: string,\n  fallbackPath?: string,\n  scenario?: string\n): any {\n  const extension = extname(path);\n\n  try {\n    return extension\n      ? readFixtureFileSync(path)\n      : readFixturePathSync(path, scenario);\n  } catch (error) {\n    if (fallbackPath) {\n      try {\n        return readFixturePathSync(fallbackPath, scenario);\n      } catch (fallbackError) {\n        console.error(\n          'You probably forgot to create the fallback fixture file',\n          fallbackPath,\n          fallbackError\n        );\n      }\n    } else {\n      console.error(\n        'You probably forgot to create the fixture file.',\n        path,\n        error\n      );\n    }\n  }\n}\n","import { compose, prop, sortBy, toLower } from 'ramda';\nimport { Route } from './interfaces';\n\nconst methods = (route: Route): string =>\n  `[${route.methods.map((m) => m.type.toUpperCase()).join(', ')}]`;\n\nconst trimTrailing = (s: string): string => {\n  return s.replace(/^\\//, '');\n};\n\nconst routeToHtml = (basePath?: string) => (route: Route): string => {\n  const path = trimTrailing(route.path);\n  return `<div>\n    <span>${methods(route)} </span>\n    <a href=\"${`${basePath}/${path}`}\">${path}</a>\n  </div>`;\n};\n\nconst sortByPath = sortBy(compose(toLower, prop('path')));\n\nconst htmlSummary = (routes: Route[], basePath?: string): string => {\n  const sorted = sortByPath([...routes]);\n  const htmlRoutes = sorted.map(routeToHtml(basePath));\n  return `<div>${htmlRoutes.join('')}</div>`;\n};\n\nexport default htmlSummary;\n","import { prop, propEq } from 'ramda';\nimport { match } from 'path-to-regexp';\nimport { MethodType } from './enums';\nimport { readFixtureSync } from './files';\nimport htmlSummary from './html-summary';\nimport {\n  Route,\n  Method,\n  MethodOverride,\n  Request,\n  ServerOptions,\n} from './interfaces';\nimport { MethodAttribute, Middleware } from './types';\n\nexport function getRoutesPaths(routes: Route[]) {\n  return routes.map(prop('path'));\n}\n\nexport function formatMethodType(methodType: string) {\n  return methodType.toUpperCase();\n}\n\nexport function findRouteByUrl(routes: Route[], url: string): Route {\n  const route = routes.find(({ path }) => {\n    const routeMatch = match(path);\n\n    return routeMatch(url);\n  });\n\n  if (route) {\n    return route;\n  }\n\n  throw new Error(`Route with url \"${url}\" not found`);\n}\n\nexport function findRouteMethodByType(methods: Method[], methodType: string) {\n  const method = methods.find(propEq('type', methodType.toLowerCase()));\n\n  if (method) {\n    return method;\n  }\n\n  throw new Error(`Method with type \"${methodType}\" not found`);\n}\n\n/**\n * Resolve the attribute by applying request argument if it is a function.\n *\n * @param attribute The attribute\n * @param req The request object\n * @return The resolved attribute\n */\nexport function resolveMethodAttribute(\n  attribute: MethodAttribute<any>,\n  req: Request\n) {\n  return typeof attribute === 'function' ? attribute(req) : attribute;\n}\n\nfunction cloneOverrides(overrides: MethodOverride[]) {\n  return overrides.map((override) => ({\n    ...override,\n    name: `${override.name} (Global)`,\n  }));\n}\n\nfunction mergeMethodWithGlobalOverrides(globalOverrides: MethodOverride[]) {\n  return function (method: Method) {\n    const methodOverrides = method.overrides || [];\n    const overrides = [...methodOverrides, ...cloneOverrides(globalOverrides)];\n\n    return {\n      ...method,\n      overrides,\n    };\n  };\n}\n\nfunction mergeRoutesWithGlobalOverrides(\n  routes: Route[],\n  globalOverrides: MethodOverride[] = []\n) {\n  if (globalOverrides.length) {\n    return routes.map((route) => {\n      const methods = route.methods.map(\n        mergeMethodWithGlobalOverrides(globalOverrides)\n      );\n\n      return {\n        ...route,\n        methods,\n      };\n    });\n  }\n\n  return routes;\n}\n\nfunction normalizeReqPath(options: ServerOptions, req: Request) {\n  return req.path.replace(options.basePath || '', '');\n}\n\nexport class RouteManager {\n  private routes: Route[];\n  private globalOverrides?: MethodOverride[];\n\n  /**\n   * Create a new route manager.\n   */\n  constructor(globalOverrides: MethodOverride[] = []) {\n    this.globalOverrides = globalOverrides;\n    this.routes = [];\n  }\n\n  /**\n   * Find a route by path.\n   *\n   * @param path Route path\n   */\n  private findRouteByPath(path: string) {\n    return findRouteByUrl(this.routes, path);\n  }\n\n  /**\n   * Find a route by path and method.\n   *\n   * @param path Route path\n   * @param method Route method\n   */\n  private findRouteMethod(path: string, method: string) {\n    const route = this.findRouteByPath(path);\n\n    return findRouteMethodByType(route.methods, method);\n  }\n\n  /**\n   * Get all routes.\n   *\n   * @return An array containing all the routes\n   */\n  getAll() {\n    return this.routes;\n  }\n\n  /**\n   * Set all the routes.\n   *\n   * @param routes The routes\n   */\n  setAll(routes: Route[]) {\n    const routesWithOverrides = mergeRoutesWithGlobalOverrides(\n      routes,\n      this.globalOverrides\n    );\n\n    while (this.routes.length > 0) {\n      this.routes.pop();\n    }\n\n    routesWithOverrides.forEach((route) => {\n      this.routes.push(route);\n    });\n  }\n\n  /**\n   * Add a docs route that print all the routes as HTML.\n   *\n   * @param basePath Server base path\n   * @param path Server docs route path\n   */\n  addDocsRoute(basePath: string = '', path: string = '') {\n    this.routes.push({\n      path,\n      methods: [\n        {\n          type: MethodType.GET,\n          headers: {\n            'Content-Type': 'text/html',\n          },\n          data: htmlSummary(this.routes, basePath),\n        },\n      ],\n    });\n  }\n\n  /**\n   * Create a middleware that resolves the route given a request.\n   *\n   * @param options Server options\n   */\n  createResolvedRouteMiddleware(options: ServerOptions): Middleware {\n    return (req, res, next) => {\n      const { method } = req;\n      const normalizedReqPath = normalizeReqPath(options, req);\n\n      try {\n        const route = this.findRouteByPath(normalizedReqPath);\n        const routeMethod = findRouteMethodByType(route.methods, method);\n\n        res.locals.route = route;\n        res.locals.routeMethod = routeMethod;\n      } catch (e) {\n        return res.status(404).send('Not found');\n      }\n\n      next();\n    };\n  }\n\n  /**\n   * Create a middleware that resolves the route method response.\n   */\n  createRouteMethodResponseMiddleware(options: ServerOptions): Middleware {\n    return (req, res, next) => {\n      const { route, routeMethod } = res.locals;\n      const data = resolveMethodAttribute(routeMethod.data, req);\n      const file = resolveMethodAttribute(routeMethod.file, req);\n      const normalizedReqPath = normalizeReqPath(options, req);\n      const content =\n        data ||\n        readFixtureSync(\n          file || normalizedReqPath,\n          route.path,\n          routeMethod.scenario\n        );\n\n      res.locals.response = content;\n\n      next();\n    };\n  }\n}\n","import {\n  complement,\n  either,\n  equals,\n  isEmpty,\n  isNil,\n  pipe,\n  prop,\n  propOr,\n  propSatisfies,\n} from 'ramda';\nimport { Method, MethodOverride, Route, Override } from './interfaces';\nimport {\n  promptRoutePath,\n  promptRouteMethodType,\n  promptRouteMethodOverride,\n} from './prompts';\nimport {\n  findRouteByUrl,\n  getRoutesPaths,\n  findRouteMethodByType,\n  formatMethodType,\n  RouteManager,\n} from './routes';\nimport { FileStorage } from './storage';\nimport { Middleware } from './types';\n\nconst OVERRIDE_DEFAULT_OPTION = 'Default';\n\nconst isNotEmpty = complement(either(isNil, isEmpty));\n\nfunction getOverridesNames(overrides: MethodOverride[]) {\n  return overrides.map(prop('name'));\n}\n\nfunction getOverridesNamesWithDefault(overrides: MethodOverride[]) {\n  return [OVERRIDE_DEFAULT_OPTION, ...getOverridesNames(overrides)];\n}\n\nfunction getMethodOverridesByType({ methods }: Route, routeMethodType: string) {\n  const method = findRouteMethodByType(methods, routeMethodType);\n\n  const { overrides } = method;\n\n  if (overrides) {\n    return overrides;\n  }\n\n  throw new Error(`Method with type \"${routeMethodType}\" has no \"overrides\"`);\n}\n\nfunction filterOverridableMethods(methods: Method[]) {\n  return methods.filter(propSatisfies(isNotEmpty, 'overrides'));\n}\n\nfunction getOverridableRoutesMethodsTypesNames(route: Route) {\n  return filterOverridableMethods(route.methods).map(\n    pipe(prop('type'), formatMethodType)\n  );\n}\n\nfunction findSelectedMethodOverride(method: Method) {\n  return method.overrides?.find(propSatisfies(equals(true), 'selected'));\n}\n\nconst FILE_STORAGE_KEY = 'overrides';\n\nexport class OverrideManager {\n  /**\n   * Creates a new override manager.\n   *\n   * @param routeManager An instance of route manager\n   */\n  constructor(\n    private routeManager: RouteManager,\n    private fileStorage?: FileStorage<typeof FILE_STORAGE_KEY>\n  ) {}\n\n  applyExternalOverrides() {\n    if (!this.fileStorage?.options.enabled || !this.fileStorage.isInitialized())\n      return;\n\n    if (this.fileStorage.isEmpty()) {\n      this.fileStorage?.setItem(FILE_STORAGE_KEY, this.getAllSelected());\n    } else {\n      const persistedOverrides = this.fileStorage.getItem<Override[]>(\n        FILE_STORAGE_KEY\n      );\n\n      persistedOverrides?.forEach((override) => {\n        const overridableRoutes = this.getAll();\n        const url = override.routePath;\n        const route = findRouteByUrl(overridableRoutes, url);\n        const type = override.methodType;\n        const overrides = getMethodOverridesByType(route, type.toLowerCase());\n        const name = override.name;\n        overrides.forEach((override) => {\n          override.selected = override.name === name;\n        });\n      });\n    }\n  }\n\n  /**\n   * Get routes with overrides.\n   *\n   * @return An array containing all the routes with overrides\n   */\n  getAll() {\n    return this.routeManager\n      .getAll()\n      .filter(\n        pipe(propOr([], 'methods'), filterOverridableMethods, isNotEmpty)\n      );\n  }\n\n  /**\n   * Get the selected route method overrides.\n   *\n   * @return An array containing all the selected overrides.\n   */\n  getAllSelected(): Override[] {\n    return this.routeManager.getAll().reduce<Override[]>((acc, route) => {\n      route.methods.forEach((method) => {\n        const selectedOverride = findSelectedMethodOverride(method);\n\n        if (selectedOverride) {\n          acc.push({\n            routePath: route.path,\n            methodType: method.type,\n            name: selectedOverride.name,\n          });\n        }\n      });\n\n      return acc;\n    }, []);\n  }\n\n  /**\n   * Prompt and select a route method override.\n   */\n  async choose(): Promise<Override> {\n    const overridableRoutes = this.getAll();\n    const { url } = await promptRoutePath(getRoutesPaths(overridableRoutes));\n    const route = findRouteByUrl(overridableRoutes, url);\n    const methodTypes = getOverridableRoutesMethodsTypesNames(route);\n    const { type } = await promptRouteMethodType(methodTypes);\n    const overrides = getMethodOverridesByType(route, type.toLowerCase());\n    const { name } = await promptRouteMethodOverride(\n      getOverridesNamesWithDefault(overrides)\n    );\n\n    overrides.forEach((override) => {\n      override.selected = override.name === name;\n    });\n\n    this.fileStorage?.setItem('overrides', this.getAllSelected());\n\n    return { routePath: url, methodType: type, name };\n  }\n\n  /**\n   * Create a middleware that merges a route with the selected override.\n   */\n  createOverriddenRouteMethodMiddleware(): Middleware {\n    return (_req, res, next) => {\n      const { routeMethod } = res.locals;\n      const selectedOverride = findSelectedMethodOverride(routeMethod);\n\n      if (selectedOverride) {\n        res.locals.routeMethod = {\n          ...routeMethod,\n          ...selectedOverride,\n        };\n      }\n\n      next();\n    };\n  }\n\n  /**\n   * Create a middleware that applies a given route override content function.\n   */\n  createOverriddenRouteContentMiddleware(): Middleware {\n    return (req, res, next) => {\n      const { response, routeMethod } = res.locals;\n      const { overrideContent } = routeMethod;\n\n      if (overrideContent) {\n        res.locals.response = overrideContent(req, response);\n      }\n\n      next();\n    };\n  }\n}\n","import {\n  createProxyMiddleware,\n  fixRequestBody,\n  RequestHandler,\n} from 'http-proxy-middleware';\nimport {\n  both,\n  complement,\n  equals,\n  pathSatisfies,\n  prop,\n  propEq,\n  propSatisfies,\n} from 'ramda';\n\nimport { Proxy, ProxyProperties, Route } from './interfaces';\nimport { promptRoutePath, promptProxy } from './prompts';\nimport { getRoutesPaths, findRouteByUrl, RouteManager } from './routes';\nimport { Middleware } from './types';\n\nconst PROXY_DEFAULT_OPTION = 'Local';\n\n/**\n * Add a httpProxy to a proxy properties.\n *\n * @param proxy The proxy properties object\n * @param basePath The server basePath\n * @return The proxy with the proxy middleware\n */\nfunction buildProxy(proxy: ProxyProperties, basePath?: string): Proxy {\n  const { appendBasePath, name, host, onProxyReq, onProxyRes } = proxy;\n\n  return {\n    host,\n    name,\n    handler: createProxyMiddleware({\n      ...proxy,\n      target: host,\n      pathRewrite: (path) =>\n        appendBasePath ? path : path.replace(basePath || '', ''),\n      changeOrigin: true,\n      onProxyReq: (proxyReq, req, res, options) => {\n        proxy.onProxyReq?.(proxyReq, req, res, options);\n        fixRequestBody(proxyReq, req);\n      },\n      onProxyRes,\n    }),\n  };\n}\n\nexport class ProxyManager {\n  private routeManager: RouteManager;\n  private currentProxyIndex: number | null;\n  private proxies: Proxy[];\n\n  /**\n   * Creates a new proxy manager.\n   *\n   * @param routeManager An instance of route manager\n   * @param proxies The proxies properties\n   * @param basePath The server basePath\n   */\n  constructor(\n    routeManager: RouteManager,\n    proxies: ProxyProperties[] = [],\n    basePath?: string\n  ) {\n    this.routeManager = routeManager;\n    this.currentProxyIndex = null;\n    this.proxies = proxies.map((proxy) => buildProxy(proxy, basePath));\n  }\n\n  /**\n   * Get all proxy names.\n   */\n  private getProxyNames() {\n    return this.proxies.map(prop('name'));\n  }\n\n  /**\n   * Get all proxy names including default one.\n   */\n  private getAllNamesWithDefault() {\n    return [PROXY_DEFAULT_OPTION, ...this.getProxyNames()];\n  }\n\n  /**\n   * Find a proxy by name.\n   *\n   * @param name Name\n   */\n  private findByName(name: string) {\n    return this.proxies.find(propEq('name', name));\n  }\n\n  /**\n   * Resolve the current proxy handler for a given route.\n   *\n   * @param route The route\n   * @return Resolved proxy handler\n   */\n  private resolveRouteProxyHandler(route: Route): RequestHandler | undefined {\n    return route.proxy?.handler;\n  }\n\n  /**\n   * Checks if the proxy is overridden to default for a given route.\n   *\n   * @param route The route\n   * @returns {boolean}\n   */\n   private isRouteProxyOverridenToDefault(route: Route): boolean {\n    return route.proxy === null;\n  }\n\n  /**\n   * Resolve the current global proxy handler.\n   *\n   * @param route The route\n   * @return Resolved proxy handler\n   */\n  private resolveGlobalProxyHandler(): RequestHandler | undefined {\n    const current = this.getCurrent();\n\n    return current?.handler;\n  }\n\n  /**\n   * Get all proxies.\n   *\n   * @return An array containing all the proxies\n   */\n  getAll() {\n    return this.proxies;\n  }\n\n  /**\n   * Get current proxy.\n   *\n   * @return The current proxy.\n   */\n  getCurrent() {\n    if (this.currentProxyIndex !== null) {\n      return this.proxies[this.currentProxyIndex];\n    }\n\n    return null;\n  }\n\n  /**\n   * Get the routes with overridden proxy.\n   *\n   * @return Overridden proxy routes\n   */\n  getOverriddenProxyRoutes() {\n    const current = this.getCurrent();\n\n    return this.routeManager\n      .getAll()\n      .filter(\n        both(\n          propSatisfies(complement(equals(undefined)), 'proxy'),\n          pathSatisfies(complement(equals(current?.name)), ['proxy', 'name'])\n        )\n      );\n  }\n\n  /**\n   * Toggle current proxy moving to the next position on list.\n   */\n  toggleCurrent() {\n    if (this.currentProxyIndex === null) {\n      this.currentProxyIndex = 0;\n    } else if (this.currentProxyIndex === this.proxies.length - 1) {\n      this.currentProxyIndex = null;\n    } else {\n      this.currentProxyIndex += 1;\n    }\n  }\n\n  /**\n   * Prompt and select a route proxy.\n   *\n   * @return The updated route\n   */\n  async chooseRouteProxy(): Promise<Route> {\n    const routes = getRoutesPaths(this.routeManager.getAll());\n    const { url } = await promptRoutePath(routes);\n    const { proxy } = await promptProxy(this.getAllNamesWithDefault());\n\n    const route = findRouteByUrl(this.routeManager.getAll(), url);\n    route.proxy = this.findByName(proxy) || null;\n\n    return route;\n  }\n\n  /**\n   * Create a middleware that optionally proxy route requests.\n   */\n  createRouteMiddleware(): Middleware {\n    return (req, res, next) => {\n      const { route } = res.locals;\n\n      const handler = this.resolveRouteProxyHandler(route);\n      if (handler) {\n        return handler(req, res, next);\n      }\n\n      next();\n    };\n  }\n\n  /**\n   * Create a middleware that optionally proxy requests globally.\n   */\n  createGlobalMiddleware(): Middleware {\n    return (req, res, next) => {\n      const handler = this.resolveGlobalProxyHandler();\n\n      if (res.locals?.route && this.isRouteProxyOverridenToDefault(res.locals.route)) {\n        return next();\n      }\n\n      if (handler) {\n        return handler(req, res, next);\n      }\n\n      next();\n    };\n  }\n}\n","import { ServerOptions, Pagination, PaginationProperties } from '../interfaces';\nimport { Middleware } from '../types';\n\nfunction resolvePaginationProperties(\n  routePagination: PaginationProperties | boolean,\n  options: ServerOptions\n): Pagination {\n  const properties =\n    typeof routePagination === 'boolean'\n      ? options.pagination\n      : { ...options.pagination, ...routePagination };\n\n  return {\n    count: properties?.count || 'count',\n    data: properties?.data || 'data',\n    empty: properties?.empty || 'empty',\n    first: properties?.first || 'first',\n    headers: properties?.headers || false,\n    last: properties?.last || 'last',\n    next: properties?.next || 'next',\n    offsetParameter: properties?.offsetParameter || 'offset',\n    page: properties?.page || 'page',\n    pageParameter: properties?.pageParameter || 'page',\n    pages: properties?.pages || 'pages',\n    sizeParameter: properties?.sizeParameter || 'size',\n    total: properties?.total || 'total',\n  };\n}\n\nfunction createPaginatedResponse(\n  properties: Pagination,\n  query: any,\n  response: any[]\n) {\n  const requestedSize = Number(query[properties.sizeParameter]) || 5;\n  const requestedPage = query[properties.offsetParameter]\n    ? Number(query[properties.offsetParameter]) / requestedSize\n    : Number(query[properties.pageParameter]);\n\n  const totalElements = response.length;\n  const totalPages = Math.ceil(totalElements / requestedSize);\n  const lastPage = totalPages - 1;\n\n  const currentOffset = requestedPage * requestedSize;\n  const currentPageData = response.slice(\n    currentOffset,\n    currentOffset + requestedSize\n  );\n\n  const metadata = {\n    [properties.empty]: currentPageData.length === 0,\n    [properties.first]: requestedPage === 0,\n    [properties.last]: requestedPage >= lastPage,\n    [properties.next]: requestedPage < lastPage,\n    [properties.page]: requestedPage,\n    [properties.pages]: totalPages,\n    [properties.count]: requestedSize,\n    [properties.total]: totalElements,\n  };\n\n  return {\n    data: currentPageData,\n    metadata,\n  };\n}\n\n/**\n * Create a paginated content.\n *\n * @param req The request object\n * @param res The response object\n * @param content The content\n * @param method The route method\n * @param options The server options\n * @return The paginated content\n */\nexport default function createPaginatedRouteMiddleware(\n  options: ServerOptions\n): Middleware {\n  return (req, res, next) => {\n    const { query } = req;\n    const { response, routeMethod } = res.locals;\n    const { pagination } = routeMethod;\n\n    if (pagination) {\n      const properties = resolvePaginationProperties(pagination, options);\n      const { data, metadata } = createPaginatedResponse(\n        properties,\n        query,\n        response\n      );\n\n      if (properties.headers) {\n        res.set(metadata);\n        res.locals.response = data;\n      } else {\n        res.locals.response = {\n          [properties.data]: data,\n          ...metadata,\n        };\n      }\n    }\n\n    next();\n  };\n}\n","import { Method, Throttling } from './interfaces';\nimport { Middleware } from './types';\n\nexport class ThrottlingManager {\n  private currentThrottlingIndex: number | null;\n  private throttlings: Throttling[];\n\n  /**\n   * Creates a new throttling manager.\n   *\n   * @param throttlings The current list of throttlings\n   */\n  constructor(throttlings: Throttling[] = []) {\n    this.currentThrottlingIndex = null;\n    this.throttlings = throttlings;\n  }\n\n  /**\n   * Resolve the delay for the current route and throttling.\n   *\n   * @param routeMethod Route method\n   * @return Resolved delay\n   */\n  private resolveRouteDelay(routeMethod: Method) {\n    return routeMethod.delay || this.getCurrentDelay();\n  }\n\n  /**\n   * Get all throttlings.\n   *\n   * @return The current list of throttlings\n   */\n  getAll() {\n    return this.throttlings;\n  }\n\n  /**\n   * Get current throttling.\n   *\n   * @return The current throttling\n   */\n  getCurrent() {\n    if (this.currentThrottlingIndex !== null) {\n      return this.throttlings[this.currentThrottlingIndex];\n    }\n    return null;\n  }\n\n  /**\n   * Get current proxy delay generating a random number between the throttling minimum and maximum milliseconds.\n   *\n   * @return A random number generated by throttling minimum and maximum milliseconds\n   */\n  getCurrentDelay() {\n    const {\n      values: [minimum, maximum],\n    } = this.getCurrent() || { values: [0, 0] };\n    return Math.ceil(Math.random() * (minimum - maximum) + maximum);\n  }\n\n  /**\n   * Toggle current throttling moving to the next position on list.\n   */\n  toggleCurrent() {\n    if (this.currentThrottlingIndex === null) {\n      this.currentThrottlingIndex = 0;\n    } else if (this.currentThrottlingIndex === this.throttlings.length - 1) {\n      this.currentThrottlingIndex = null;\n    } else {\n      this.currentThrottlingIndex += 1;\n    }\n  }\n\n  /**\n   * Create a middleware that delays the execution.\n   */\n  createMiddleware(): Middleware {\n    return (_req, res, next) => {\n      const { routeMethod } = res.locals;\n\n      setTimeout(next, this.resolveRouteDelay(routeMethod));\n    };\n  }\n}\n","import chalk from 'chalk';\nimport readline, { Interface as ReadLine } from 'readline';\n\nimport { Middleware } from './types';\nimport { OverrideManager } from './overrides';\nimport { ProxyManager } from './proxy';\nimport { ThrottlingManager } from './throttling';\nimport { formatMethodType } from './routes';\nimport { FileStorage } from './storage';\n\nfunction formatEndpoint(routePath: string, methodType: string) {\n  return `${formatMethodType(methodType)} ${routePath}`;\n}\n\nexport class UIManager {\n  private display: ReadLine;\n\n  /**\n   * Write a text to the user screen.\n   *\n   * @param text The text\n   */\n  private write(text: string) {\n    this.display.write(text);\n  }\n\n  /**\n   * Clear the user screen.\n   */\n  private clear() {\n    this.write('\\x1b[2J');\n    this.write('\\x1b[0f');\n  }\n\n  /**\n   * Write a line break to the user screen.\n   */\n  private linebreak() {\n    this.write('\\r\\n');\n  }\n\n  /**\n   * Write a message to the user screen followed by a line break.\n   *\n   * @param parameters An array of text to display\n   */\n  private line(...parameters: string[]) {\n    this.write(parameters.join('\\x20'));\n    this.write('\\r\\n');\n  }\n\n  /**\n   * Add two empty spaces before writing a message to the user screen followed by a line break.\n   *\n   * @param parameters An array of text to display\n   */\n  private paragraph(...parameters: string[]) {\n    this.line(' ', ...parameters);\n  }\n\n  private printConnection() {\n    const connection = this.proxyManager.getCurrent();\n\n    this.line(chalk.blackBright('Connection:'));\n    if (connection) {\n      this.paragraph(\n        chalk.bold.white(connection.name),\n        chalk.bold.blackBright(connection.host)\n      );\n    } else {\n      this.paragraph('Local');\n    }\n  }\n\n  private printConnectionOverrides() {\n    this.line(chalk.blackBright('Connection overrides:'));\n    const connectionOverrides = this.proxyManager.getOverriddenProxyRoutes();\n\n    if (connectionOverrides.length) {\n      connectionOverrides.forEach((route) =>\n        this.paragraph(`- ${`${route.path}: ${route.proxy?.name || 'Local'}`}`)\n      );\n    } else {\n      this.paragraph('None');\n    }\n  }\n\n  private printThrottling() {\n    const currentThrottling = this.throttlingManager.getCurrent();\n\n    this.line(chalk.blackBright('Throttling:'));\n    if (currentThrottling) {\n      this.paragraph(\n        chalk.bold.white(currentThrottling.name),\n        chalk.bold.black(currentThrottling.values[0]),\n        chalk.bold.black('-'),\n        chalk.bold.black(currentThrottling.values[1]),\n        chalk.bold.black('ms')\n      );\n    } else {\n      this.paragraph('Disabled');\n    }\n  }\n\n  private printOverrides() {\n    this.line(chalk.blackBright('Overrides:'));\n\n    const selectedOverrides = this.overrideManager.getAllSelected();\n\n    if (selectedOverrides.length) {\n      selectedOverrides.forEach(({ routePath, methodType, name }) =>\n        this.paragraph(`- ${formatEndpoint(routePath, methodType)}: ${name}`)\n      );\n    } else {\n      this.paragraph('None');\n    }\n  }\n\n  private printAvailableCommands() {\n    this.line('Available commands:');\n    this.paragraph(`- ${chalk.bold.white('c')} to toggle the connection`);\n    this.paragraph(`- ${chalk.bold.white('t')} to toggle the throttling`);\n    this.paragraph(\n      `- ${chalk.bold.white(\n        'o'\n      )} to change endpoint settings according to \"overrides\"`\n    );\n    this.paragraph(\n      `- ${chalk.bold.white('p')} to toggle the connection to an endpoint`\n    );\n    this.paragraph(`- ${chalk.bold.white('q')} to stop and quit the service`);\n\n    if (this.fileStorage?.options.enabled) {\n      this.paragraph(\n        `- ${chalk.bold.white(\n          'x'\n        )} to reset file storage permanently (restart to apply changes)`\n      );\n    }\n\n    this.linebreak();\n  }\n\n  /**\n   * Create a new UI manager.\n   *\n   * @param proxyManager The proxy manager\n   * @param throttlingManager The throttling manager\n   * @param overrideManager The routes overrides manager\n   * @return The UI manager\n   */\n  constructor(\n    public proxyManager: ProxyManager,\n    public throttlingManager: ThrottlingManager,\n    public overrideManager: OverrideManager,\n    private fileStorage?: FileStorage<string>\n  ) {\n    this.display = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    });\n\n    this.proxyManager = proxyManager;\n    this.throttlingManager = throttlingManager;\n    this.overrideManager = overrideManager;\n  }\n\n  /**\n   * Clear the screen and draw a new dashboard.\n   */\n  drawDashboard() {\n    this.clear();\n\n    this.line(chalk.bold.green('The service is running!'));\n\n    this.printConnection();\n    this.printConnectionOverrides();\n    this.printThrottling();\n    this.printOverrides();\n    this.printAvailableCommands();\n  }\n\n  /**\n   * Draw the request information to the user screen.\n   *\n   * @param req The route request object\n   * @param res The route response object\n   * @param next The express next function\n   */\n  createDrawRequestMiddleware(): Middleware {\n    return (req, _res, next) => {\n      const currentThrottling = this.throttlingManager.getCurrent();\n      const currentThrottlingDelay = this.throttlingManager.getCurrentDelay();\n\n      this.line(chalk.bold.white(`${req.method} ${req.path}`));\n      if (currentThrottling) {\n        this.line(chalk.blackBright('[' + currentThrottlingDelay + 'ms]'));\n      }\n\n      next();\n    };\n  }\n\n  /**\n   * Draw that a route method override was selected.\n   *\n   * @param routePath The overridden route path\n   * @param routeMethodType The overridden route method type\n   * @param selectedOverrideName The selected override name\n   */\n  drawMethodOverrideChanged(\n    routePath: string,\n    routeMethodType: string,\n    selectedOverrideName: string\n  ) {\n    const endpoint = chalk.magenta(formatEndpoint(routePath, routeMethodType));\n    const override = chalk.magenta(selectedOverrideName);\n\n    this.display.write(`Endpoint ${endpoint} changed to response ${override}`);\n    this.linebreak();\n  }\n\n  /**\n   * Draw that a route proxy was selected.\n   *\n   * @param routePath The route path\n   * @param selectedProxyName The selected proxy name\n   */\n  drawRouteProxyChanged(routePath: string, selectedProxyName: string) {\n    const route = chalk.magenta(routePath);\n    const proxy = chalk.magenta(selectedProxyName);\n\n    this.display.write(`Route ${route} changed to proxy ${proxy}`);\n    this.linebreak();\n  }\n}\n","import express from 'express';\nimport { ApolloServer, gql } from 'apollo-server-express';\nimport { readFixtureSync } from './files';\n\nfunction useResolverWithFixture(prefix: String) {\n  return function useResolverWithFixtureResolver(\n    _: any,\n    __: any,\n    ___: any,\n    info: any\n  ) {\n    const { fieldName } = info;\n    return readFixtureSync(prefix + fieldName + '.json');\n  };\n}\n\nfunction createQueryResolver(carrier: {}, field: any) {\n  const {\n    name: { value },\n  } = field;\n  return {\n    ...carrier,\n    [value]: useResolverWithFixture('graphql/queries/'),\n  };\n}\n\nfunction createMutationResolver(carrier: {}, field: any) {\n  const {\n    name: { value },\n  } = field;\n  return {\n    ...carrier,\n    [value]: useResolverWithFixture('graphql/mutations/'),\n  };\n}\n\nfunction findQueryDefinitions(definition: any) {\n  return definition.name.value === 'Query';\n}\n\nfunction findMutationDefinitions(definition: any) {\n  return definition.name.value === 'Mutation';\n}\n\nexport class GraphQLManager {\n  private typeDefs: any;\n\n  constructor(definitions: TemplateStringsArray | string) {\n    this.typeDefs = gql(definitions);\n  }\n\n  private hasQueryDefinitions() {\n    return !!this.typeDefs.definitions.find(findQueryDefinitions);\n  }\n\n  private getGraphQLQueries() {\n    return this.typeDefs.definitions.find(findQueryDefinitions);\n  }\n\n  private hasMutationDefinitions() {\n    return !!this.typeDefs.definitions.find(findMutationDefinitions);\n  }\n\n  private getGraphQLMutations() {\n    return this.typeDefs.definitions.find(findMutationDefinitions);\n  }\n\n  private generateQueriesAndMutations(serverOptions: any) {\n    const serverOptionsEnhanced = {\n      ...serverOptions,\n      resolvers: {},\n    };\n\n    if (this.hasQueryDefinitions()) {\n      serverOptionsEnhanced.resolvers.Query = this.getGraphQLQueries().fields.reduce(\n        createQueryResolver,\n        {}\n      );\n    }\n    if (this.hasMutationDefinitions()) {\n      serverOptionsEnhanced.resolvers.Mutation = this.getGraphQLMutations().fields.reduce(\n        createMutationResolver,\n        {}\n      );\n    }\n\n    return serverOptionsEnhanced;\n  }\n\n  applyMiddlewareTo(app: express.Application): ApolloServer {\n    const serverOptions = {\n      typeDefs: this.typeDefs,\n    };\n\n    const serverOptionsEnhanced = this.generateQueriesAndMutations(\n      serverOptions\n    );\n\n    const server: ApolloServer = new ApolloServer(serverOptionsEnhanced);\n\n    const middlewareOptions = { app };\n\n    server.applyMiddleware(middlewareOptions);\n\n    return server;\n  }\n}\n","import * as fs from 'fs';\n\ntype PartialFileSystem = {\n  readFileSync(path: string, options: string): string;\n  writeFileSync(path: string, data: string): void;\n};\n\nexport interface FileStorageOptions {\n  enabled: boolean;\n  path?: string;\n  fs?: PartialFileSystem;\n}\n\nconst EMPTY_STORAGE = {};\n\nconst DEFAULT_OPTIONS = { enabled: false };\n\nexport class FileStorage<TKeys extends string> {\n  private fs: PartialFileSystem;\n\n  constructor(public options: FileStorageOptions = DEFAULT_OPTIONS) {\n    this.fs = this.options.fs ?? fs;\n\n    if (options.enabled) {\n      this.initializeStorage();\n    }\n  }\n\n  public isEmpty() {\n    return Object.keys(this.getStorage()).length === 0;\n  }\n\n  public isInitialized() {\n    try {\n      if (!this.options.enabled || !this.options.path) return false;\n      this.fs.readFileSync(this.options.path, 'utf-8');\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  public getItem<TData = unknown>(key: TKeys): TData | undefined {\n    if (!this.isInitialized()) return;\n\n    const storage = this.getStorage<TData>();\n    return storage[key];\n  }\n\n  public setItem<TData = Record<string, unknown>>(key: TKeys, data: TData) {\n    if (!this.isInitialized()) return;\n\n    const storage = this.getStorage();\n    storage[key] = data;\n\n    if (this.options.path) {\n      this.persist(storage);\n    }\n  }\n\n  public clear() {\n    this.persist(EMPTY_STORAGE);\n  }\n\n  private persist<TData = unknown>(data: Record<string, TData>) {\n    if (this.options.path) {\n      this.fs.writeFileSync(this.options.path, JSON.stringify(data, null, 2));\n    }\n  }\n\n  private getStorage<TData = unknown>(): Record<TKeys, TData> {\n    const fileContent = this.getSerializedStorage();\n    try {\n      return JSON.parse(fileContent);\n    } catch (e) {\n      throw new Error('Invalid file storage content');\n    }\n  }\n\n  private initializeStorage(): void {\n    if (!this.options.path) {\n      throw new Error('FileStorage path option is missing');\n    }\n\n    if (!this.isInitialized()) {\n      this.persist(EMPTY_STORAGE);\n    }\n  }\n\n  private getSerializedStorage(): string {\n    try {\n      if (!this.options.path) return '{}';\n      return this.fs.readFileSync(this.options.path, 'utf-8');\n    } catch (e) {\n      if (e.code !== 'ENOENT') throw e;\n      this.initializeStorage();\n      return this.getSerializedStorage();\n    }\n  }\n}\n","import cors from 'cors';\nimport express from 'express';\n\nimport { InputManager } from './input';\nimport {\n  Method,\n  Server,\n  ServerOptions,\n  Route,\n  Request,\n  Response,\n} from './interfaces';\nimport { OverrideManager } from './overrides';\nimport { ProxyManager } from './proxy';\nimport createPaginatedRouteMiddleware from './response/paginated';\nimport createSearchableRouteMiddleware from './response/searchable';\nimport { resolveMethodAttribute, RouteManager } from './routes';\nimport { ThrottlingManager } from './throttling';\nimport { UIManager } from './ui';\nimport { GraphQLManager } from './graphql';\nimport { join } from 'path';\nimport { FileStorage } from './storage';\n\nexport function createServer(options = {} as ServerOptions): Server {\n  const {\n    basePath = '',\n    docsRoute = '',\n    definitions,\n    middlewares,\n    overrides,\n    proxies,\n    throttlings,\n    fileStorageOptions,\n  } = options;\n\n  const fileStorage = new FileStorage(fileStorageOptions);\n  const routeManager = new RouteManager(overrides);\n  const overrideManager = new OverrideManager(routeManager, fileStorage);\n  const proxyManager = new ProxyManager(routeManager, proxies, basePath);\n  const throttlingManager = new ThrottlingManager(throttlings);\n  const uiManager = new UIManager(\n    proxyManager,\n    throttlingManager,\n    overrideManager,\n    fileStorage\n  );\n\n  const expressServer: express.Application = express();\n\n  if (definitions) {\n    const graphqlManager = new GraphQLManager(definitions);\n    graphqlManager.applyMiddlewareTo(expressServer);\n  }\n\n  expressServer.use(middlewares || cors());\n\n  expressServer.use(\n    uiManager.createDrawRequestMiddleware(),\n    routeManager.createResolvedRouteMiddleware(options),\n    proxyManager.createRouteMiddleware(),\n    overrideManager.createOverriddenRouteMethodMiddleware(),\n    throttlingManager.createMiddleware(),\n    proxyManager.createGlobalMiddleware()\n  );\n\n  /**\n   * Create the method response object.\n   *\n   * @param req The request object\n   * @param res The response object\n   */\n  function createRouteMethodResponse(req: Request, res: Response): void {\n    const { response, routeMethod } = res.locals;\n    const { code = 200 } = routeMethod;\n\n    const headers = resolveMethodAttribute(routeMethod.headers, req);\n\n    res.set(headers).status(code);\n\n    if (Number.isInteger(response)) {\n      res.send(response.toString());\n    } else {\n      res.send(response);\n    }\n  }\n\n  /**\n   * Create a new route's method.\n   *\n   * @param route The route object\n   * @param method The method object\n   */\n  function createRouteMethod(route: Route, method: Method): void {\n    const { path } = route;\n    const { type } = method;\n\n    expressServer[type](\n      join(basePath, path),\n      routeManager.createRouteMethodResponseMiddleware(options),\n      createSearchableRouteMiddleware(),\n      createPaginatedRouteMiddleware(options),\n      overrideManager.createOverriddenRouteContentMiddleware(),\n      createRouteMethodResponse\n    );\n  }\n\n  /**\n   * Create a new route.\n   *\n   * @param route The route object\n   */\n  function createRoute(route: Route): void {\n    const { methods } = route;\n\n    methods.forEach((method) => createRouteMethod(route, method));\n  }\n\n  return {\n    /**\n     * Register the server routes.\n     *\n     * @param routes The server routes\n     */\n    routes(routes): void {\n      routeManager.setAll(routes);\n      routeManager.addDocsRoute(basePath, docsRoute);\n      routeManager.getAll().forEach(createRoute);\n      overrideManager.applyExternalOverrides();\n    },\n\n    /**\n     * Start listening on port.\n     *\n     * @param port The server port\n     */\n    listen(port = 8080): void {\n      const inputManager = new InputManager();\n\n      inputManager.init(true);\n\n      uiManager.drawDashboard();\n\n      function onConnection() {\n        proxyManager.toggleCurrent();\n        uiManager.drawDashboard();\n      }\n\n      function onThrottling() {\n        throttlingManager.toggleCurrent();\n        uiManager.drawDashboard();\n      }\n\n      async function onOverride() {\n        const { routePath, methodType, name } = await overrideManager.choose();\n\n        uiManager.drawDashboard();\n        uiManager.drawMethodOverrideChanged(routePath, methodType, name);\n      }\n\n      async function onRouteProxy() {\n        const route = await proxyManager.chooseRouteProxy();\n\n        uiManager.drawDashboard();\n        uiManager.drawRouteProxyChanged(\n          route.path,\n          route.proxy?.name || 'Local'\n        );\n      }\n\n      async function onResetFileStorage() {\n        fileStorage.clear();\n        uiManager.drawDashboard();\n      }\n\n      inputManager.addListener('c', onConnection);\n      inputManager.addListener('t', onThrottling);\n      inputManager.addListener('o', onOverride);\n      inputManager.addListener('p', onRouteProxy);\n\n      if (fileStorage.options.enabled) {\n        inputManager.addListener('x', onResetFileStorage);\n      }\n\n      expressServer.listen(port);\n    },\n  };\n}\n","import { Search } from '../interfaces';\nimport { Middleware } from '../types';\n\nfunction filterProperty(\n  query: any,\n  item: any,\n  parameter: string,\n  property: string\n) {\n  return (\n    item[property] &&\n    item[property].toLowerCase().includes(query[parameter].toLowerCase())\n  );\n}\n\nfunction filterContent(search: Search, query: any, item: any) {\n  const { parameter, properties } = search;\n\n  return properties.find((property) =>\n    filterProperty(query, item, parameter, property)\n  );\n}\n\nfunction createSearchableResponse(\n  routeSearch: Search,\n  query: any,\n  response: any[]\n) {\n  return response.filter((item) => filterContent(routeSearch, query, item));\n}\n\n/**\n * Create a middleware that filters the content using the search properties.\n */\nexport default function createSearchableRouteMiddleware(): Middleware {\n  return (req, res, next) => {\n    const { query } = req;\n    const { response, routeMethod } = res.locals;\n    const { search, search: { parameter = 'search' } = {} } = routeMethod;\n    const hasParameterOnQuery = query[parameter];\n\n    if (search && hasParameterOnQuery) {\n      res.locals.response = createSearchableResponse(search, query, response);\n    }\n\n    next();\n  };\n}\n"],"names":["this","executeEvent","bind","onKeyPress","listeners","key","control","event","process","exit","InputManager","listener","name","ctrl","chunk","filter","_this","filterInputListener","forEach","obj","Boolean","then","unbindKeypress","eventResult","isPromise","reopenStdinAfterInquirer","bindKeypress","readline","emitKeypressEvents","stdin","setRawMode","resume","on","off","raw","push","inquirer","registerPrompt","require","MethodType","filterByPredicate","list","predicate","fuzzy","map","prop","promptRoutePath","paths","prompt","type","message","source","_","input","Promise","resolve","promptRouteMethodOverride","overrides","direntIsFile","dirent","isFile","readFixtureFileSync","path","extname","JSON","parse","readFileSync","toString","readJSONFileSync","findFilePathByDirnameAndBasename","dir","base","scenario","fullBasename","fixture","readdirSync","withFileTypes","text","direntFilenameMatchText","Error","join","scanFixturePath","folder","dirname","file","basename","pathDirnameFixtureDirectory","pathFixtureDirectory","error","readFixturePathSync","readFixtureSync","fallbackPath","extension","fallbackError","console","sortByPath","sortBy","compose","toLower","htmlSummary","routes","basePath","route","replace","methods","m","toUpperCase","routeToHtml","getRoutesPaths","formatMethodType","methodType","findRouteByUrl","url","find","_a","match","routeMatch","findRouteMethodByType","method","propEq","toLowerCase","resolveMethodAttribute","attribute","req","mergeMethodWithGlobalOverrides","globalOverrides","override","cloneOverrides","normalizeReqPath","options","RouteManager","findRouteByPath","routesWithOverrides","length","mergeRoutesWithGlobalOverrides","pop","GET","headers","Content-Type","data","res","next","normalizedReqPath","routeMethod","locals","e","status","send","content","response","isNotEmpty","complement","either","isNil","isEmpty","getOverridesNamesWithDefault","getOverridesNames","getMethodOverridesByType","routeMethodType","filterOverridableMethods","propSatisfies","findSelectedMethodOverride","equals","routeManager","fileStorage","OverrideManager","enabled","isInitialized","setItem","getAllSelected","persistedOverrides","getItem","getAll","routePath","selected","pipe","propOr","reduce","acc","selectedOverride","overridableRoutes","_b","methodTypes","getOverridableRoutesMethodsTypesNames","types","_req","overrideContent","proxies","currentProxyIndex","proxy","appendBasePath","host","onProxyRes","handler","createProxyMiddleware","target","pathRewrite","changeOrigin","onProxyReq","proxyReq","fixRequestBody","buildProxy","ProxyManager","getProxyNames","current","getCurrent","both","undefined","pathSatisfies","getAllNamesWithDefault","findByName","resolveRouteProxyHandler","resolveGlobalProxyHandler","isRouteProxyOverridenToDefault","createPaginatedRouteMiddleware","query","pagination","properties","routePagination","count","empty","first","last","offsetParameter","page","pageParameter","pages","sizeParameter","total","resolvePaginationProperties","_c","requestedSize","Number","requestedPage","totalElements","totalPages","Math","ceil","lastPage","currentOffset","currentPageData","slice","metadata","createPaginatedResponse","set","throttlings","currentThrottlingIndex","ThrottlingManager","delay","getCurrentDelay","values","minimum","maximum","random","setTimeout","resolveRouteDelay","formatEndpoint","proxyManager","throttlingManager","overrideManager","display","createInterface","output","stdout","UIManager","write","_i","parameters","line","connection","chalk","blackBright","paragraph","bold","white","connectionOverrides","getOverriddenProxyRoutes","currentThrottling","black","selectedOverrides","linebreak","clear","green","printConnection","printConnectionOverrides","printThrottling","printOverrides","printAvailableCommands","_res","currentThrottlingDelay","selectedOverrideName","endpoint","magenta","selectedProxyName","useResolverWithFixture","prefix","__","___","info","fieldName","createQueryResolver","carrier","field","value","createMutationResolver","findQueryDefinitions","definition","findMutationDefinitions","definitions","typeDefs","gql","GraphQLManager","serverOptions","serverOptionsEnhanced","resolvers","hasQueryDefinitions","Query","getGraphQLQueries","fields","hasMutationDefinitions","Mutation","getGraphQLMutations","app","generateQueriesAndMutations","server","ApolloServer","middlewareOptions","applyMiddleware","EMPTY_STORAGE","DEFAULT_OPTIONS","fs","initializeStorage","FileStorage","Object","keys","getStorage","storage","persist","writeFileSync","stringify","fileContent","getSerializedStorage","code","docsRoute","middlewares","fileStorageOptions","uiManager","expressServer","express","createRouteMethodResponse","isInteger","createRoute","createRouteMethodResponseMiddleware","search","hasParameterOnQuery","routeSearch","item","parameter","property","includes","filterProperty","filterContent","createSearchableResponse","createOverriddenRouteContentMiddleware","createRouteMethod","applyMiddlewareTo","use","cors","createDrawRequestMiddleware","createResolvedRouteMiddleware","createRouteMiddleware","createOverriddenRouteMethodMiddleware","createMiddleware","createGlobalMiddleware","setAll","addDocsRoute","applyExternalOverrides","listen","port","inputManager","init","drawDashboard","addListener","toggleCurrent","choose","drawMethodOverrideChanged","chooseRouteProxy","drawRouteProxyChanged"],"mappings":"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"}